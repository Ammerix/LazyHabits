{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreateScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: [_jsx(Text, {\n      children: \"Cr\\xE9er une tenue\"\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: pickImage,\n      children: _jsx(Text, {\n        children: \"Ouvrir la galerie photo\"\n      })\n    }), image && _jsx(Image, {\n      source: {\n        uri: image\n      },\n      style: {\n        width: 200,\n        height: 200\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  button: {\n    alignItems: \"center\",\n    backgroundColor: 'light',\n    borderWidth: 2,\n    borderRadius: 30,\n    padding: 20\n  }\n});","map":{"version":3,"sources":["/Users/emmamarqueton/Desktop/LazyHabitsDossier/LazyHabits/screens/CreateScreen.tsx"],"names":["React","useState","useEffect","ImagePicker","TouchableOpacity","CreateScreen","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","flex","alignItems","justifyContent","styles","button","width","height","StyleSheet","create","backgroundColor","borderWidth","borderRadius","padding"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;;AAEA,eAAe,SAASC,YAAT,GAAyB;AACtC,kBAA0BJ,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAGAL,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACKM,QAAQ,CAACC,EAAT,KAAgB,KADrB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAE4BN,WAAW,CAACO,mCAAZ,EAF5B;;AAAA;AAAA;AAEWC,cAAAA,MAFX,yBAEWA,MAFX;;AAGG,kBAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBC,gBAAAA,KAAK,CAAC,2DAAD,CAAL;AACD;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAQD,GATQ,EASN,EATM,CAAT;;AAYA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGV,WAAW,CAACW,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEZ,WAAW,CAACa,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAApC,CADH;;AAAA;AACZC,YAAAA,MADY;AAQhBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,gBAAI,CAACA,MAAM,CAACG,SAAZ,EAAuB;AACrBjB,cAAAA,QAAQ,CAACc,MAAM,CAACI,GAAR,CAAR;AACD;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAeA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA,eACE,KAAC,IAAD;AAAA;AAAA,MADF,EAEE,KAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEC,MAAM,CAACC,MAAhC;AAAwC,MAAA,OAAO,EAAEjB,SAAjD;AAAA,gBACA,KAAC,IAAD;AAAA;AAAA;AADA,MAFF,EAKGP,KAAK,IAAI,KAAC,KAAD;AAAO,MAAA,MAAM,EAAE;AAAEmB,QAAAA,GAAG,EAAEnB;AAAP,OAAf;AAA+B,MAAA,KAAK,EAAE;AAAEyB,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB;AAAtC,MALZ;AAAA,IADF;AASD;AACD,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,MAAM,EAAE;AACNH,IAAAA,UAAU,EAAE,QADN;AAENQ,IAAAA,eAAe,EAAE,OAFX;AAGNC,IAAAA,WAAW,EAAE,CAHP;AAINC,IAAAA,YAAY,EAAE,EAJR;AAKNC,IAAAA,OAAO,EAAE;AALH;AADuB,CAAlB,CAAf","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport { Text, View, Image, Platform, StyleSheet } from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\"\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nexport default function CreateScreen () {\n  const [image, setImage] = useState(null);\n\n  // Si on a pas la permission\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  //On sélectionne une image dans la gallerie\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n    if (!result.cancelled) {\n      setImage(result.uri); // visiblement erreur mais fonctionne quand même \n    }\n    \n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Text>Créer une tenue</Text>\n      <TouchableOpacity style={styles.button} onPress={pickImage}>          \n      <Text>Ouvrir la galerie photo</Text>\n      </TouchableOpacity>\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  button: {\n    alignItems: \"center\",\n    backgroundColor: 'light',\n    borderWidth: 2,\n    borderRadius: 30,\n    padding: 20,\n  },\n});"]},"metadata":{},"sourceType":"module"}